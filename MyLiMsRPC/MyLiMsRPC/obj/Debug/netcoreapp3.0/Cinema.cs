// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/cinema.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MyLiMsRPC {

  /// <summary>Holder for reflection information generated from Protos/cinema.proto</summary>
  public static partial class CinemaReflection {

    #region Descriptor
    /// <summary>File descriptor for Protos/cinema.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CinemaReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChNQcm90b3MvY2luZW1hLnByb3RvEgZjaW5lbWEaG2dvb2dsZS9wcm90b2J1",
            "Zi9lbXB0eS5wcm90byKWAQoaR2V0QXZhaWxhYmxlTW92aWVzUmVzcG9uc2US",
            "DwoHbW92aWVJZBgBIAEoBRIMCgRuYW1lGAIgASgJEg0KBWdlbnJlGAMgASgJ",
            "EhAKCGR1cmF0aW9uGAQgASgFEhYKDmNsYXNzaWZpY2F0aW9uGAUgASgBEiAK",
            "GG51bWJlck9mQXZhaWxhYmxlVGlja2V0cxgGIAEoBSI1CiJHZXRBdmFpbGFi",
            "bGVUaWNrZXRzRm9yTW92aWVSZXF1ZXN0Eg8KB21vdmllSWQYASABKAUiPwoj",
            "R2V0QXZhaWxhYmxlVGlja2V0c0Zvck1vdmllUmVzcG9uc2USGAoQYXZhaWxh",
            "YmxlVGlja2V0cxgBIAEoBTLUAQoGQ2luZW1hElIKEkdldEF2YWlsYWJsZU1v",
            "dmllcxIWLmdvb2dsZS5wcm90b2J1Zi5FbXB0eRoiLmNpbmVtYS5HZXRBdmFp",
            "bGFibGVNb3ZpZXNSZXNwb25zZTABEnYKG0dldEF2YWlsYWJsZVRpY2tldHNG",
            "b3JNb3ZpZRIqLmNpbmVtYS5HZXRBdmFpbGFibGVUaWNrZXRzRm9yTW92aWVS",
            "ZXF1ZXN0GisuY2luZW1hLkdldEF2YWlsYWJsZVRpY2tldHNGb3JNb3ZpZVJl",
            "c3BvbnNlQgyqAglNeUxpTXNSUENiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.EmptyReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MyLiMsRPC.GetAvailableMoviesResponse), global::MyLiMsRPC.GetAvailableMoviesResponse.Parser, new[]{ "MovieId", "Name", "Genre", "Duration", "Classification", "NumberOfAvailableTickets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MyLiMsRPC.GetAvailableTicketsForMovieRequest), global::MyLiMsRPC.GetAvailableTicketsForMovieRequest.Parser, new[]{ "MovieId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MyLiMsRPC.GetAvailableTicketsForMovieResponse), global::MyLiMsRPC.GetAvailableTicketsForMovieResponse.Parser, new[]{ "AvailableTickets" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// The response message to get available movies
  /// </summary>
  public sealed partial class GetAvailableMoviesResponse : pb::IMessage<GetAvailableMoviesResponse> {
    private static readonly pb::MessageParser<GetAvailableMoviesResponse> _parser = new pb::MessageParser<GetAvailableMoviesResponse>(() => new GetAvailableMoviesResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAvailableMoviesResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MyLiMsRPC.CinemaReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAvailableMoviesResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAvailableMoviesResponse(GetAvailableMoviesResponse other) : this() {
      movieId_ = other.movieId_;
      name_ = other.name_;
      genre_ = other.genre_;
      duration_ = other.duration_;
      classification_ = other.classification_;
      numberOfAvailableTickets_ = other.numberOfAvailableTickets_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAvailableMoviesResponse Clone() {
      return new GetAvailableMoviesResponse(this);
    }

    /// <summary>Field number for the "movieId" field.</summary>
    public const int MovieIdFieldNumber = 1;
    private int movieId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MovieId {
      get { return movieId_; }
      set {
        movieId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "genre" field.</summary>
    public const int GenreFieldNumber = 3;
    private string genre_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Genre {
      get { return genre_; }
      set {
        genre_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 4;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "classification" field.</summary>
    public const int ClassificationFieldNumber = 5;
    private double classification_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Classification {
      get { return classification_; }
      set {
        classification_ = value;
      }
    }

    /// <summary>Field number for the "numberOfAvailableTickets" field.</summary>
    public const int NumberOfAvailableTicketsFieldNumber = 6;
    private int numberOfAvailableTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfAvailableTickets {
      get { return numberOfAvailableTickets_; }
      set {
        numberOfAvailableTickets_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAvailableMoviesResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAvailableMoviesResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MovieId != other.MovieId) return false;
      if (Name != other.Name) return false;
      if (Genre != other.Genre) return false;
      if (Duration != other.Duration) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Classification, other.Classification)) return false;
      if (NumberOfAvailableTickets != other.NumberOfAvailableTickets) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MovieId != 0) hash ^= MovieId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Genre.Length != 0) hash ^= Genre.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (Classification != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Classification);
      if (NumberOfAvailableTickets != 0) hash ^= NumberOfAvailableTickets.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MovieId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MovieId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Genre.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Genre);
      }
      if (Duration != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Duration);
      }
      if (Classification != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(Classification);
      }
      if (NumberOfAvailableTickets != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NumberOfAvailableTickets);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MovieId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MovieId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Genre.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Genre);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (Classification != 0D) {
        size += 1 + 8;
      }
      if (NumberOfAvailableTickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfAvailableTickets);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAvailableMoviesResponse other) {
      if (other == null) {
        return;
      }
      if (other.MovieId != 0) {
        MovieId = other.MovieId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Genre.Length != 0) {
        Genre = other.Genre;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.Classification != 0D) {
        Classification = other.Classification;
      }
      if (other.NumberOfAvailableTickets != 0) {
        NumberOfAvailableTickets = other.NumberOfAvailableTickets;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MovieId = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Genre = input.ReadString();
            break;
          }
          case 32: {
            Duration = input.ReadInt32();
            break;
          }
          case 41: {
            Classification = input.ReadDouble();
            break;
          }
          case 48: {
            NumberOfAvailableTickets = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The request message to get the available ticket count
  /// </summary>
  public sealed partial class GetAvailableTicketsForMovieRequest : pb::IMessage<GetAvailableTicketsForMovieRequest> {
    private static readonly pb::MessageParser<GetAvailableTicketsForMovieRequest> _parser = new pb::MessageParser<GetAvailableTicketsForMovieRequest>(() => new GetAvailableTicketsForMovieRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAvailableTicketsForMovieRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MyLiMsRPC.CinemaReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAvailableTicketsForMovieRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAvailableTicketsForMovieRequest(GetAvailableTicketsForMovieRequest other) : this() {
      movieId_ = other.movieId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAvailableTicketsForMovieRequest Clone() {
      return new GetAvailableTicketsForMovieRequest(this);
    }

    /// <summary>Field number for the "movieId" field.</summary>
    public const int MovieIdFieldNumber = 1;
    private int movieId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MovieId {
      get { return movieId_; }
      set {
        movieId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAvailableTicketsForMovieRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAvailableTicketsForMovieRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MovieId != other.MovieId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MovieId != 0) hash ^= MovieId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MovieId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MovieId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MovieId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MovieId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAvailableTicketsForMovieRequest other) {
      if (other == null) {
        return;
      }
      if (other.MovieId != 0) {
        MovieId = other.MovieId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MovieId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The response message containing the available ticket count
  /// </summary>
  public sealed partial class GetAvailableTicketsForMovieResponse : pb::IMessage<GetAvailableTicketsForMovieResponse> {
    private static readonly pb::MessageParser<GetAvailableTicketsForMovieResponse> _parser = new pb::MessageParser<GetAvailableTicketsForMovieResponse>(() => new GetAvailableTicketsForMovieResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetAvailableTicketsForMovieResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MyLiMsRPC.CinemaReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAvailableTicketsForMovieResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAvailableTicketsForMovieResponse(GetAvailableTicketsForMovieResponse other) : this() {
      availableTickets_ = other.availableTickets_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetAvailableTicketsForMovieResponse Clone() {
      return new GetAvailableTicketsForMovieResponse(this);
    }

    /// <summary>Field number for the "availableTickets" field.</summary>
    public const int AvailableTicketsFieldNumber = 1;
    private int availableTickets_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AvailableTickets {
      get { return availableTickets_; }
      set {
        availableTickets_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetAvailableTicketsForMovieResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetAvailableTicketsForMovieResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AvailableTickets != other.AvailableTickets) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AvailableTickets != 0) hash ^= AvailableTickets.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AvailableTickets != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AvailableTickets);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AvailableTickets != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AvailableTickets);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetAvailableTicketsForMovieResponse other) {
      if (other == null) {
        return;
      }
      if (other.AvailableTickets != 0) {
        AvailableTickets = other.AvailableTickets;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            AvailableTickets = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
