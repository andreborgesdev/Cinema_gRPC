// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/cinema.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace MyLiMsRPCClient {
  /// <summary>
  /// The greeting service definition.
  /// </summary>
  public static partial class Cinema
  {
    static readonly string __ServiceName = "cinema.Cinema";

    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Google.Protobuf.WellKnownTypes.Empty.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MyLiMsRPCClient.GetAvailableMoviesResponse> __Marshaller_cinema_GetAvailableMoviesResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MyLiMsRPCClient.GetAvailableMoviesResponse.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MyLiMsRPCClient.GetAvailableTicketsForMovieRequest> __Marshaller_cinema_GetAvailableTicketsForMovieRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MyLiMsRPCClient.GetAvailableTicketsForMovieRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::MyLiMsRPCClient.GetAvailableTicketsForMovieResponse> __Marshaller_cinema_GetAvailableTicketsForMovieResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::MyLiMsRPCClient.GetAvailableTicketsForMovieResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::MyLiMsRPCClient.GetAvailableMoviesResponse> __Method_GetAvailableMovies = new grpc::Method<global::Google.Protobuf.WellKnownTypes.Empty, global::MyLiMsRPCClient.GetAvailableMoviesResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetAvailableMovies",
        __Marshaller_google_protobuf_Empty,
        __Marshaller_cinema_GetAvailableMoviesResponse);

    static readonly grpc::Method<global::MyLiMsRPCClient.GetAvailableTicketsForMovieRequest, global::MyLiMsRPCClient.GetAvailableTicketsForMovieResponse> __Method_GetAvailableTicketsForMovie = new grpc::Method<global::MyLiMsRPCClient.GetAvailableTicketsForMovieRequest, global::MyLiMsRPCClient.GetAvailableTicketsForMovieResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAvailableTicketsForMovie",
        __Marshaller_cinema_GetAvailableTicketsForMovieRequest,
        __Marshaller_cinema_GetAvailableTicketsForMovieResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::MyLiMsRPCClient.CinemaReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for Cinema</summary>
    public partial class CinemaClient : grpc::ClientBase<CinemaClient>
    {
      /// <summary>Creates a new client for Cinema</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public CinemaClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Cinema that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public CinemaClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected CinemaClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected CinemaClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Get available movies
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::MyLiMsRPCClient.GetAvailableMoviesResponse> GetAvailableMovies(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAvailableMovies(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get available movies
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::MyLiMsRPCClient.GetAvailableMoviesResponse> GetAvailableMovies(global::Google.Protobuf.WellKnownTypes.Empty request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetAvailableMovies, null, options, request);
      }
      /// <summary>
      /// Get available ticket count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MyLiMsRPCClient.GetAvailableTicketsForMovieResponse GetAvailableTicketsForMovie(global::MyLiMsRPCClient.GetAvailableTicketsForMovieRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAvailableTicketsForMovie(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get available ticket count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MyLiMsRPCClient.GetAvailableTicketsForMovieResponse GetAvailableTicketsForMovie(global::MyLiMsRPCClient.GetAvailableTicketsForMovieRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAvailableTicketsForMovie, null, options, request);
      }
      /// <summary>
      /// Get available ticket count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MyLiMsRPCClient.GetAvailableTicketsForMovieResponse> GetAvailableTicketsForMovieAsync(global::MyLiMsRPCClient.GetAvailableTicketsForMovieRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAvailableTicketsForMovieAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Get available ticket count
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MyLiMsRPCClient.GetAvailableTicketsForMovieResponse> GetAvailableTicketsForMovieAsync(global::MyLiMsRPCClient.GetAvailableTicketsForMovieRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAvailableTicketsForMovie, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override CinemaClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new CinemaClient(configuration);
      }
    }

  }
}
#endregion
